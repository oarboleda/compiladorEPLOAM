/* Generated By:JavaCC: Do not edit this line. EPLOAM.java */
import java.util.*;
import java.io.*;

public class EPLOAM implements EPLOAMConstants {
    static String cadSalida = new String();
    static String nombreArchivoEntrada = new String();
    static TablaSimbolos tabla = new TablaSimbolos();
    static int nroErrores=0;
    static int nivelAnidamiento=0;
    static boolean cerrarComparacion=false;
    static int BUENA_EJECUCION=1;
    static int MALA_EJECUCION=0;
    static boolean salidaConsola = true;
    static boolean errorCompilacion = false;


    public static void main(String args[]) throws ParseException {
        FileWriter fichero = null;
        PrintWriter pw = null;
        File archivo = null;
        FileReader fr = null;
        String archivoSalida;
        int estadoProceso = MALA_EJECUCION;

        creditos();
        try
        {
            if (args.length <3){
                System.out.println("\u005cn\u005cn....No se indico el archivo a procesar");
                System.exit(1);
            }else{
                if (args.length==4){
                    salidaConsola = false;
                    System.out.println("<table border=\u005c"1\u005c">\u005cn");
                    System.out.println("<tr bgcolor=\u005c"#C0C0C0\u005c"><th width=\u005c"10%\u005c">Linea</th><th width=\u005c"10%\u005c">Columna</th><th>Descripcion</th></tr>\u005cn");
                }
                nombreArchivoEntrada = args[0];
                archivo=new File(args[1]+"\u005c\u005c"+nombreArchivoEntrada+".epl");
                archivoSalida=args[2]+"\u005c\u005c"+args[0]+".java";
                fr = new FileReader (archivo);
                new EPLOAM(fr).gramatica();
                if (nroErrores>0){
                    mensajeFinal("\u005cn\u005cnProceso de traduccion con "+nroErrores+" errores"+
                                        "\u005cn....No se generara archivo "+archivoSalida);
                } else {
                    mensajeFinal("\u005cn\u005cnProceso de traduccion sin errores"+
                                        "\u005cn....See generara archivo "+archivoSalida);
                    fichero = new FileWriter(archivoSalida);
                    pw = new PrintWriter(fichero);
                    pw.println(cadSalida);
                    estadoProceso=BUENA_EJECUCION;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (!salidaConsola){
                System.out.println("</table>\u005cn");
            }
           try {
           // Nuevamente aprovechamos el finally para
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
           System.exit(estadoProceso);
        }
    }

    private static String nuevaLinea(){
        String cadAux;
        cadAux="\u005cn";

        if (nivelAnidamiento<0){
            nroErrores++;
            System.out.println("\u005cn\u005cn Error interno en el anidamiento de instrucciones");
        } else {
            for (int i=0; i<nivelAnidamiento; i++) cadAux+="   ";
        }
        return cadAux;
    }

    private static void despliegaError(String mensaje){
        int inicioLinea = token.beginLine;
        int inicioColumna = token.beginColumn;

        nroErrores++;
        if (salidaConsola){
            System.out.println("Error linea:"+inicioLinea+" columna:"+inicioColumna+
                                " - "+mensaje);
        }else{
            if (nroErrores%2==0){
                System.out.println("<tr bgcolor=\u005c"#D9C0DC\u005c"><td align=\u005c"center\u005c">"+inicioLinea+"</td><td align=\u005c"center\u005c">"+
                                    inicioColumna+"</td><td>"+mensaje+"</td></tr>");
            }else{
                System.out.println("<tr bgcolor=\u005c"#8AB6D0\u005c"><td align=\u005c"center\u005c">"+inicioLinea+"</td><td align=\u005c"center\u005c">"+
                                    inicioColumna+"</td><td>"+mensaje+"</td></tr>");
            }

        }
    }

    private static void mensajeFinal(String mensaje){
        if (salidaConsola){
            System.out.println(mensaje);
        }else{
            System.out.println("<tr bgcolor=\u005c"D9DAE6\u005c"><td colspan=\u005c"3\u005c">"+mensaje+"</td></tr>");
        }
    }

    private static void creditos(){
        System.out.println("\u005cn   ========================================================================"+
                           "\u005cn   = the Easiest Programming Language, created by Orlando Arboleda Molina ="+
                           "\u005cn   =                            EPLOAM version 1.0                        ="+
                           "\u005cn   =                                 25/05/2010                           ="+
                           "\u005cn   =                                                                      ="+
                           "\u005cn   = Created and Implemented by: Orlando Arboleda Molina, MSc.            ="+
                           "\u005cn   =                             orarbole@hotmail.com                     ="+
                           "\u005cn   ========================================================================");
    }

    private static char tipoOR_AND(char tipoe1, char tipoe2) {
        if ((tipoe1 == Simbolo.tipoBooleano) && (tipoe2 == Simbolo.tipoBooleano)) {
            return Simbolo.tipoBooleano;
        } else {
            return Simbolo.tipoIndefinido;
        }
    }

    private static char tipoIGUAL_DIFERENTE(char tipoe1, char tipoe2) {
        if (tipoe1==tipoe2){
            return Simbolo.tipoBooleano;
        }else{
            if (tipoe1==Simbolo.tipoEntero && tipoe2==Simbolo.tipoReal) {
                return Simbolo.tipoBooleano;
            } else {
                if (tipoe1==Simbolo.tipoReal && tipoe2==Simbolo.tipoEntero) {
                    return Simbolo.tipoBooleano;
                } else {
                    return Simbolo.tipoIndefinido;
                }
            }
        }
    }

    private static char tipoSUMA_RESTA(char tipoe1, char tipoe2) {
        if (tipoe1==Simbolo.tipoCadena || tipoe2==Simbolo.tipoCadena){
            return Simbolo.tipoCadena;
        }else{
            if (tipoe1==Simbolo.tipoEntero && tipoe2==Simbolo.tipoEntero) {
                return Simbolo.tipoEntero;
            } else {
                if ((tipoe1==Simbolo.tipoEntero && tipoe2==Simbolo.tipoReal) ||
                    (tipoe1==Simbolo.tipoReal && (tipoe2==Simbolo.tipoEntero || tipoe2==Simbolo.tipoReal))
                   ) {
                    return Simbolo.tipoReal;
                } else {
                    return Simbolo.tipoIndefinido;
                }
            }
        }
    }

    private static char tipoMULTIPLICA_DIVIDA(char tipoe1, char tipoe2) {
        if (tipoe1==Simbolo.tipoEntero && tipoe2==Simbolo.tipoEntero){
            return Simbolo.tipoEntero;
        }else{
            if ((tipoe1==Simbolo.tipoEntero && tipoe2==Simbolo.tipoReal) ||
                (tipoe1==Simbolo.tipoReal && (tipoe2==Simbolo.tipoEntero || tipoe2==Simbolo.tipoReal))
               ) {
                return Simbolo.tipoReal;
            } else {
                return Simbolo.tipoIndefinido;
            }
        }
    }

/*
gramatica ::= encabezado metodoPrincipal cierre
*/
  static final public void gramatica() throws ParseException {
    encabezado();
    metodoPrincipal();
    cierre();
  }

/*
encabezado ::= 
*/
  static final public void encabezado() throws ParseException {
    String nombreArchivo;
    String cadComentario=new String();
    try {
                cadSalida+="import javax.swing.JOptionPane;\u005cn/**\u005cn*"+
                "\u005cn* @author Compilador Lenguaje EPLOAM\u005cn*/\u005cn\u005cn";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENTARIO:
        cadComentario = comentario();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(ALGORITMO);
      jj_consume_token(ID);
                                nombreArchivo=new String(token.image);
                                if (!nombreArchivo.equals(nombreArchivoEntrada)) {
                                    despliegaError("El nombre del archivo de entrada no coincide con el nombre del programa");
                                }
      jj_consume_token(LLAVE_ABRE);
                          cadSalida+="public class "+nombreArchivo+" {";
                          nivelAnidamiento++;
    } catch (ParseException x) {
        despliegaError("Todo algoritmo debe iniciar con algoritmo"+
                                   " NombreAlgoritmo { \u005cn\u005ct");
        Token t;
        do
        {
            t = getNextToken();
        }while (t.kind != LLAVE_ABRE);
    }
  }

/*
finPrincipal ::=
*/
  static final public void finPrincipal() throws ParseException {
    try {
      jj_consume_token(LLAVE_CIERRA);
                         nivelAnidamiento--; cadSalida+=nuevaLinea()+" }";  nivelAnidamiento--;
    } catch (ParseException x) {
        despliegaError("Falta llave de finalizacion del metodo principal");
    }
  }

/*
metodoPrincipal ::=
*/
  static final public void metodoPrincipal() throws ParseException {
    encabezadoPrincipal();
    declaraciones();
    cuerpo();
    finPrincipal();
  }

/*
encabezadoPrincipal ::=
*/
  static final public void encabezadoPrincipal() throws ParseException {
    try {
      jj_consume_token(PRINCIPAL);
      jj_consume_token(PAREN_ABRE);
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(LLAVE_ABRE);
                        cadSalida+=nuevaLinea()+" public static void main(String[] args) {";
                        nivelAnidamiento++;
    } catch (ParseException x) {
        despliegaError("Error al definir el encabezado del metodo principal");
        Token t;
        do
        {
            t = getNextToken();
        }while (t.kind != LLAVE_ABRE);
    }
  }

/*
declaraciones ::=
*/
  static final public void declaraciones() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOENTERO:
      case TIPOREAL:
      case TIPOCARACTER:
      case TIPOBOOLEANO:
      case TIPOCADENA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      declaracion();
    }
      cadSalida+="\u005cn";
  }

/*
declaraVariable ::=
*/
  static final public void declaraVariable(char tipo) throws ParseException {
    Simbolo s;
    char tipoExpr;
    s = obtenerVariable(tipo);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
                  cadSalida+="=";
      tipoExpr = expr();
            if (s.tipo!=tipoExpr) {
                if (s.tipo!=Simbolo.tipoReal || tipoExpr!=Simbolo.tipoEntero){
                    despliegaError("Error en la declaracion de variables - No hay coincidencia de tipos");
                }
            }else{
                s.inicializado();
            }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

/*
declaracion ::=
*/
  static final public void declaracion() throws ParseException {
    char tipoVariable;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOENTERO:
        jj_consume_token(TIPOENTERO);
                          cadSalida+=nuevaLinea()+" int "; tipoVariable=Simbolo.tipoEntero;
        break;
      case TIPOREAL:
        jj_consume_token(TIPOREAL);
                        cadSalida+=nuevaLinea()+" double "; tipoVariable=Simbolo.tipoReal;
        break;
      case TIPOCADENA:
        jj_consume_token(TIPOCADENA);
                          cadSalida+=nuevaLinea()+" String "; tipoVariable=Simbolo.tipoCadena;
        break;
      case TIPOBOOLEANO:
        jj_consume_token(TIPOBOOLEANO);
                            cadSalida+=nuevaLinea()+" boolean ";  tipoVariable=Simbolo.tipoBooleano;
        break;
      case TIPOCARACTER:
        jj_consume_token(TIPOCARACTER);
                            cadSalida+=nuevaLinea()+" char ";  tipoVariable=Simbolo.tipoCaracter;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      declaraVariable(tipoVariable);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMA);
                  cadSalida+=",";
        declaraVariable(tipoVariable);
      }
      jj_consume_token(PUNTOYCOMA);
                      cadSalida+=";";
    } catch (ParseException x) {
        despliegaError("Error en la declaracion de variables");
        Token t;
        do
        {
            t = getNextToken();
        }while (t.kind != PUNTOYCOMA);
    }
  }

/*
obtenerVariable ::=
*/
  static final public Simbolo obtenerVariable(char tipo) throws ParseException {
    jj_consume_token(ID);
        Simbolo s;
        if ((s = tabla.buscar(token.image)) != null){
            despliegaError("Variable "+token.image+ " ya se habia declarado");
        } else {
            cadSalida+=token.image;
            s=tabla.insertar(token.image,tipo);
        }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*
validarVariable ::=
*/
  static final public Simbolo validarVariable() throws ParseException {
    jj_consume_token(ID);
        Simbolo s;
        if ((s = tabla.buscar(token.image)) == null){
            despliegaError("Variable "+token.image+ " no se habia definido");
            {if (true) throw new ParseException("error en validarVariable");}
        } else{
            cadSalida+=token.image;
        }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*
cuerpo ::=
*/
  static final public void cuerpo() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_1(3)) {
        asignacion();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          lectura();
          break;
        case IMPRIMIR:
          impresion();
          break;
        case SI:
        case SEGUN:
          decision();
          break;
        case PARA:
        case MIENTRAS:
        case HAGA:
          repeticion();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPRIMIR:
      case SI:
      case SEGUN:
      case PARA:
      case MIENTRAS:
      case HAGA:
      case ID:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
  }

/*
inicializacion ::=
*/
  static final public Simbolo inicializacionPARA() throws ParseException {
    Object resultado;
    char tipoExpr;
    Simbolo s=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOENTERO:
        jj_consume_token(TIPOENTERO);
                           cadSalida+=" int ";
        s = obtenerVariable(Simbolo.tipoEntero);
        jj_consume_token(IGUAL);
                      cadSalida+="=";
        tipoExpr = expr();
                                if (tipoExpr!=Simbolo.tipoEntero) {
                                    despliegaError("El valor asignado en la inicializacion del ciclo PARA no es Entero");
                                }else{
                                    s.inicializado();
                                }
        break;
      case TIPOREAL:
        jj_consume_token(TIPOREAL);
                         cadSalida+=" double ";
        s = obtenerVariable(Simbolo.tipoReal);
        jj_consume_token(IGUAL);
                      cadSalida+="=";
        tipoExpr = expr();
                                if (tipoExpr!=Simbolo.tipoReal && tipoExpr!=Simbolo.tipoEntero) {
                                    despliegaError("El valor asignado en la inicializacion del ciclo PARA no es Real ni Entero");
                                }else{
                                    s.inicializado();
                                }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOYCOMA);
                       cadSalida+=" ;"; {if (true) return s;}
    } catch (ParseException x) {
        despliegaError("Error en la inicializacion del ciclo PARA");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PUNTOYCOMA);
    }
    throw new Error("Missing return statement in function");
  }

/*
condicion ::=
*/
  static final public void condicion() throws ParseException {
    char tipoExpr;
    try {
      tipoExpr = expr();
            if (tipoExpr==Simbolo.tipoIndefinido) {
                despliegaError("Error en la condicion - tipos incompatibles");
            } else {
                if (tipoExpr!=Simbolo.tipoBooleano) {
                    despliegaError("Error en la condicion - el resultado no es booleano");
                }
            }
    } catch (ParseException x) {
        despliegaError("Error en la condicion usada");
    }
  }

/*
condicion ::=
*/
  static final public void condicionPARA() throws ParseException {
    try {
          cadSalida+=" ";
      condicion();
      jj_consume_token(PUNTOYCOMA);
                       cadSalida+=" ; ";
    } catch (ParseException x) {
        despliegaError("Error en la condicion del ciclo PARA");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PUNTOYCOMA);
    }
  }

/*
cicloPara ::=
*/
  static final public void cicloPara() throws ParseException {
    Simbolo s;
    try {
      jj_consume_token(PARA);
      jj_consume_token(PAREN_ABRE);
                              cadSalida+=nuevaLinea()+" for (";
      s = inicializacionPARA();
      condicionPARA();
      asignacionBasica();
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(LLAVE_ABRE);
                               cadSalida+=" ){"; nivelAnidamiento++;
      cuerpo();
      jj_consume_token(LLAVE_CIERRA);
                                 nivelAnidamiento--; cadSalida+=nuevaLinea()+" }"; tabla.eliminar(s.nombre);
    } catch (ParseException x) {
        despliegaError("Error en la estructura de repeticion PARA");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LLAVE_CIERRA);
    }
  }

/*
cicloMientras ::=
*/
  static final public void cicloMientras() throws ParseException {
    try {
      jj_consume_token(MIENTRAS);
      jj_consume_token(PAREN_ABRE);
                                  cadSalida+=nuevaLinea()+" while ( ";
      condicion();
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(LLAVE_ABRE);
                                      cadSalida+=" ){"; nivelAnidamiento++;
      cuerpo();
      jj_consume_token(LLAVE_CIERRA);
                         nivelAnidamiento--; cadSalida+=nuevaLinea()+" }";
    } catch (ParseException x) {
        despliegaError("Error en la estructura de repeticion MIENTRAS");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LLAVE_CIERRA);
    }
  }

/*
cicloHagaMientras ::=
*/
  static final public void cicloHagaMientras() throws ParseException {
    try {
      jj_consume_token(HAGA);
      jj_consume_token(LLAVE_ABRE);
                               cadSalida+=nuevaLinea()+" do { "; nivelAnidamiento++;
      cuerpo();
      jj_consume_token(LLAVE_CIERRA);
      jj_consume_token(MIENTRAS);
      jj_consume_token(PAREN_ABRE);
                                                  nivelAnidamiento--;cadSalida+=nuevaLinea()+" }while( ";
      condicion();
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(PUNTOYCOMA);
                                      cadSalida+=" );";
    } catch (ParseException x) {
        despliegaError("Error en la estructura de repeticion HAGA MIENTRAS");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LLAVE_CIERRA);
    }
  }

/*
repeticion ::=
*/
  static final public void repeticion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      cicloPara();
      break;
    case MIENTRAS:
      cicloMientras();
      break;
    case HAGA:
      cicloHagaMientras();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
decision ::=
*/
  static final public void decision() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SI:
      decisionSimpleDoble();
      break;
    case SEGUN:
      decisionMultiple();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
decisionMultiple ::=
*/
  static final public void decisionMultiple() throws ParseException {
    Simbolo s;
    char tipoExpr;
    try {
      jj_consume_token(SEGUN);
      jj_consume_token(PAREN_ABRE);
                               cadSalida+=nuevaLinea()+" switch ( ";
      s = validarVariable();
            if (s.tipo!=Simbolo.tipoEntero && s.tipo!=Simbolo.tipoCaracter) {
                despliegaError("Error en la estructura de decision Multiple - La variable usada solo puede ser de tipo entero o caracter");
            }
            if (!s.inicializado) {
                despliegaError("Error en la estructura de decision Multiple - A la variable "+s.nombre+" no se le ha asignado un valor");
            }
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(LLAVE_ABRE);
                                      cadSalida+=" ){"; nivelAnidamiento++;
      label_4:
      while (true) {
        jj_consume_token(CASO);
                     cadSalida+=nuevaLinea()+" case ";
        tipoExpr = expr();
                                        if (tipoExpr!=Simbolo.tipoEntero && tipoExpr!=Simbolo.tipoCaracter) {
                                            despliegaError("Error en la estructura de decision Multiple - Solo se permiten enteros y caracteres");
                                        }else {
                                            if (s.tipo!=tipoExpr){
                                                despliegaError("Error en la estructura de decision Multiple - La alternativa no es del mismo tipo de la variable comparada");
                                            }
                                        }
        jj_consume_token(DOSPUNTOS);
                                  cadSalida+=" : "; nivelAnidamiento++;
        cuerpo();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROMPA:
          jj_consume_token(ROMPA);
                               cadSalida+=nuevaLinea()+" break;";
          jj_consume_token(PUNTOYCOMA);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
                      nivelAnidamiento--;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASO:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTROCASO:
        jj_consume_token(OTROCASO);
        jj_consume_token(DOSPUNTOS);
                                   cadSalida+=nuevaLinea()+" default: "; nivelAnidamiento++;
        cuerpo();
                   nivelAnidamiento--;
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(LLAVE_CIERRA);
                         nivelAnidamiento--; cadSalida+=nuevaLinea()+" }";
    } catch (ParseException x) {
        despliegaError("Error en la estructura de decision HAGA MIENTRAS");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LLAVE_CIERRA);
    }
  }

/*
decisionSimpleDoble ::=
*/
  static final public void decisionSimpleDoble() throws ParseException {
    char tipoExpr;
    try {
      jj_consume_token(SI);
      jj_consume_token(PAREN_ABRE);
                            cadSalida+=nuevaLinea()+" if ( ";
      tipoExpr = expr();
                            if (tipoExpr!=Simbolo.tipoBooleano) {
                                despliegaError("Error en la estructura de decision Simple - La condicion no es valida");
                            }
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(LLAVE_ABRE);
                                      cadSalida+=" ){"; nivelAnidamiento++;
      cuerpo();
      jj_consume_token(LLAVE_CIERRA);
                         nivelAnidamiento--; cadSalida+=nuevaLinea()+" }";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINO:
        jj_consume_token(SINO);
        jj_consume_token(LLAVE_ABRE);
                                  cadSalida+=" else { "; nivelAnidamiento++;
        cuerpo();
        jj_consume_token(LLAVE_CIERRA);
                             nivelAnidamiento--; cadSalida+=nuevaLinea()+" }";
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (ParseException x) {
        despliegaError("Error en la estructura de decision Simple");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LLAVE_CIERRA);
    }
  }

/*
asignacion ::=
*/
  static final public void asignacion() throws ParseException {
    try {
          cadSalida+=nuevaLinea()+" ";
      asignacionBasica();
      jj_consume_token(PUNTOYCOMA);
                       cadSalida+=";";
    } catch (ParseException x) {
        despliegaError("Error en la asignacion");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PUNTOYCOMA);
    }
  }

/*
asignacionBasica ::=
*/
  static final public void asignacionBasica() throws ParseException {
    Simbolo s;
    char tipoExpr;
    try {
      s = validarVariable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MASMAS:
        jj_consume_token(MASMAS);
                           cadSalida+="++";
        break;
      case MENOSMENOS:
        jj_consume_token(MENOSMENOS);
                               cadSalida+="--";
        break;
      case MASIGUAL:
      case MENOSIGUAL:
      case PORIGUAL:
      case DIVIGUAL:
      case IGUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
          jj_consume_token(IGUAL);
                          cadSalida+="=";
          break;
        case MASIGUAL:
          jj_consume_token(MASIGUAL);
                             cadSalida+="+=";
          break;
        case MENOSIGUAL:
          jj_consume_token(MENOSIGUAL);
                               cadSalida+="-=";
          break;
        case PORIGUAL:
          jj_consume_token(PORIGUAL);
                             cadSalida+="*=";
          break;
        case DIVIGUAL:
          jj_consume_token(DIVIGUAL);
                             cadSalida+="/=";
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tipoExpr = expr();
                if (s.tipo!=tipoExpr) {
                    if (s.tipo!=Simbolo.tipoReal || tipoExpr!=Simbolo.tipoEntero){
                        despliegaError("Error en la la asignacion - No hay coincidencia de tipos");
                    }
                }else{
                    s.inicializado();
                }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException x) {
        despliegaError("Error en la asignacion Basica");
    }
  }

/*
lectura ::=
*/
  static final public void lectura() throws ParseException {
    Simbolo s;
    char tipoExpr;
    try {
          cadSalida+=nuevaLinea()+" ";
      s = validarVariable();
            if (s.tipo==Simbolo.tipoBooleano) {
                despliegaError("Error en la lectura - No se puede leer un dato booleano");
            }
      jj_consume_token(IGUAL);
      jj_consume_token(LEER);
      jj_consume_token(PAREN_ABRE);
            if (s.tipo==Simbolo.tipoEntero){
                cadSalida+="=Integer.parseInt(JOptionPane.showInputDialog(";
            } else {
                if (s.tipo==Simbolo.tipoReal){
                    cadSalida+="=Double.parseDouble(JOptionPane.showInputDialog(";
                } else {
                    cadSalida+="=JOptionPane.showInputDialog(";
                }
            }
      tipoExpr = expr();
            if (tipoExpr!=Simbolo.tipoCadena) {
                despliegaError("Error en la lectura - No se pasa cadena a desplegar");
            }else{
                s.inicializado();
            }
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(PUNTOYCOMA);
            if (s.tipo==Simbolo.tipoCadena) {
                cadSalida+=");";
            } else {
                if (s.tipo==Simbolo.tipoEntero || s.tipo==Simbolo.tipoReal){
                                cadSalida+="));";
                }else{
                    cadSalida+=").charAt(0);";
                }
            }
    } catch (ParseException x) {
        despliegaError("Error en la lectura");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PUNTOYCOMA);
    }
  }

/*
impresion ::=
*/
  static final public void impresion() throws ParseException {
    char tipoExpr;
    try {
      jj_consume_token(IMPRIMIR);
      jj_consume_token(PAREN_ABRE);
                                  cadSalida+=nuevaLinea()+" JOptionPane.showMessageDialog(null,";
      tipoExpr = expr();
                            if (tipoExpr!=Simbolo.tipoCadena) {
                                despliegaError("Error en la impresion - No se pasa cadena a desplegar");
                            }
      jj_consume_token(PAREN_CIERRA);
      jj_consume_token(PUNTOYCOMA);
                                      cadSalida+=");";
    } catch (ParseException x) {
        despliegaError("Error en la impresion");
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PUNTOYCOMA);
    }
  }

/*
cierre ::=
*/
  static final public void cierre() throws ParseException {
    try {
      jj_consume_token(LLAVE_CIERRA);
                        cadSalida+=nuevaLinea()+" }";
    } catch (ParseException x) {
        despliegaError("Falta llave de cierre del metodo principal");
        Token t;
        do
        {
            t = getNextToken();
        }while (t.kind != EOF);
    }
  }

/*
expr ::=
*/
  static final public char expr() throws ParseException {
    char t1, t2;
    t1 = expr1();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
                        cadSalida+="||";
      t2 = expr1();
                                                       t1=tipoOR_AND(t1, t2);
    }
                                                                                    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/*
expr1 ::=
*/
  static final public char expr1() throws ParseException {
    char t1, t2;
    t1 = expr2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
                         cadSalida+="&&";
      t2 = expr2();
                                                        t1=tipoOR_AND(t1, t2);
    }
                                                                                     {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/*
expr2 ::=
*/
  static final public char expr2() throws ParseException {
    char t1, t2;
    t1 = expr3();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALLOGICO:
      case DIFERENTELOGICO:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALLOGICO:
        jj_consume_token(IGUALLOGICO);
                                if (t1!=Simbolo.tipoCadena)
                                    cadSalida+="==";
                                else{
                                    cerrarComparacion=true;
                                    cadSalida+=".equals(";
                                }
        break;
      case DIFERENTELOGICO:
        jj_consume_token(DIFERENTELOGICO);
                                              cadSalida+="!=";
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = expr3();
                                 t1=tipoIGUAL_DIFERENTE(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/*
expr3 ::=
*/
  static final public char expr3() throws ParseException {
    char t1, t2;
    t1 = expr4();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORIGUAL:
      case MENORIGUAL:
      case MAYOR:
      case MENOR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORIGUAL:
        jj_consume_token(MAYORIGUAL);
                                         cadSalida+=">=";
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
                                         cadSalida+="<=";
        break;
      case MAYOR:
        jj_consume_token(MAYOR);
                                    cadSalida+=">";
        break;
      case MENOR:
        jj_consume_token(MENOR);
                                    cadSalida+="<";
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = expr4();
                                 t1=tipoIGUAL_DIFERENTE(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/*
expr4 ::=
*/
  static final public char expr4() throws ParseException {
    char t1, t2;
    t1 = expr5();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
                                  cadSalida+="+";
        break;
      case MENOS:
        jj_consume_token(MENOS);
                                    cadSalida+="-";
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = expr5();
                                 t1=tipoSUMA_RESTA(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/*
expr5 ::=
*/
  static final public char expr5() throws ParseException {
    char t1, t2;
    t1 = expr6();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIVIDIDO:
      case MODULO:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
                                  cadSalida+="*";
        break;
      case DIVIDIDO:
        jj_consume_token(DIVIDIDO);
                                       cadSalida+="/";
        break;
      case MODULO:
        jj_consume_token(MODULO);
                                     cadSalida+="%";
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = expr6();
                                 t1=tipoMULTIPLICA_DIVIDA(t1, t2);
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/*
expr6 ::=
*/
  static final public char expr6() throws ParseException {
    Simbolo simbol;
    int i;
    double r;
    boolean b;
    char c, c1, c2;
    String s;
    char t1, t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC_RAIZ:
    case FUNC_SENO:
    case FUNC_ABSOLUTO:
    case FUNC_POTENCIA:
    case PAREN_ABRE:
    case ID:
    case ENTERO:
    case REAL:
    case MENOS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOS:
        jj_consume_token(MENOS);
               {cadSalida+="-";};
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        simbol = validarVariable();
                    if (!simbol.inicializado) {
                        despliegaError("Error en la expresion - A la variable "+simbol.nombre+" no se le ha asignado un valor");
                    }
                    {if (true) return simbol.tipo;}
        break;
      case ENTERO:
        i = entero();
                           {if (true) return Simbolo.tipoEntero;}
        break;
      case REAL:
        r = real();
                         {if (true) return Simbolo.tipoReal;}
        break;
      case FUNC_RAIZ:
        jj_consume_token(FUNC_RAIZ);
                            cadSalida+="Math.sqrt";
        jj_consume_token(PAREN_ABRE);
                             cadSalida+="(";
        c = expr();
        jj_consume_token(PAREN_CIERRA);
                               cadSalida+=")";
                            if (c==Simbolo.tipoReal || c==Simbolo.tipoEntero)
                                {if (true) return Simbolo.tipoReal;}
                            else {if (true) return Simbolo.tipoIndefinido;}
        break;
      case FUNC_SENO:
        jj_consume_token(FUNC_SENO);
                            cadSalida+="Math.sin";
        jj_consume_token(PAREN_ABRE);
                             cadSalida+="(";
        c = expr();
        jj_consume_token(PAREN_CIERRA);
                               cadSalida+=")";
                            if (c==Simbolo.tipoReal || c==Simbolo.tipoEntero)
                                {if (true) return Simbolo.tipoReal;}
                            else {if (true) return Simbolo.tipoIndefinido;}
        break;
      case FUNC_ABSOLUTO:
        jj_consume_token(FUNC_ABSOLUTO);
                                cadSalida+="Math.abs";
        jj_consume_token(PAREN_ABRE);
                             cadSalida+="(";
        c = expr();
        jj_consume_token(PAREN_CIERRA);
                               cadSalida+=")";
                            if ( c==Simbolo.tipoReal || c==Simbolo.tipoEntero )
                                {if (true) return c;}
                            else {if (true) return Simbolo.tipoIndefinido;}
        break;
      case FUNC_POTENCIA:
        jj_consume_token(FUNC_POTENCIA);
                                cadSalida+="Math.pow";
        jj_consume_token(PAREN_ABRE);
                             cadSalida+="(";
        c1 = expr();
        jj_consume_token(COMA);
                           cadSalida+=",";
        c2 = expr();
        jj_consume_token(PAREN_CIERRA);
                               cadSalida+=")";
                            if (tipoMULTIPLICA_DIVIDA(c1,c2)==Simbolo.tipoReal)
                                {if (true) return Simbolo.tipoReal;}
                            else {if (true) return Simbolo.tipoIndefinido;}
        break;
      case PAREN_ABRE:
        jj_consume_token(PAREN_ABRE);
                             cadSalida+="(";
        c = expr();
        jj_consume_token(PAREN_CIERRA);
                               cadSalida+=")"; {if (true) return c;}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BOOLEANO:
      b = booleano();
                         {if (true) return Simbolo.tipoBooleano;}
      break;
    case CARACTER:
      c = caracter();
                         {if (true) return Simbolo.tipoCaracter;}
      break;
    case CADENA:
      s = cadena();
                if (cerrarComparacion){
                    cadSalida+=")";
                }
                cerrarComparacion=false;
                {if (true) return Simbolo.tipoCadena;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int entero() throws ParseException {
    jj_consume_token(ENTERO);
                cadSalida+=token.image; {if (true) return Integer.parseInt(token.image);}
    throw new Error("Missing return statement in function");
  }

  static final public double real() throws ParseException {
    jj_consume_token(REAL);
              cadSalida+=token.image; {if (true) return Double.parseDouble(token.image);}
    throw new Error("Missing return statement in function");
  }

  static final public boolean booleano() throws ParseException {
    jj_consume_token(BOOLEANO);
                  cadSalida+=token.image; {if (true) return Boolean.parseBoolean(token.image);}
    throw new Error("Missing return statement in function");
  }

  static final public char caracter() throws ParseException {
    jj_consume_token(CARACTER);
                  cadSalida+=token.image; {if (true) return token.image.charAt(1);}
    throw new Error("Missing return statement in function");
  }

  static final public String cadena() throws ParseException {
    jj_consume_token(CADENA);
                 cadSalida+=token.image; {if (true) return token.image.substring(1, token.image.length()-1 );}
    throw new Error("Missing return statement in function");
  }

  static final public String comentario() throws ParseException {
    jj_consume_token(COMENTARIO);
                     cadSalida+=token.image+"\u005cn"; {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(DIVIGUAL)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(PORIGUAL)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(MENOSIGUAL)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(CARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(MASIGUAL)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(MENOSMENOS)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(MASMAS)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(BOOLEANO)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(ENTERO)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(PAREN_ABRE)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(FUNC_POTENCIA)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(FUNC_ABSOLUTO)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(PUNTOYCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(FUNC_SENO)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(FUNC_RAIZ)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EPLOAMTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xf80,0x0,0xf80,0x400000,0x8b000000,0x8b000000,0x180,0x80000000,0xa000000,0x40000000,0x10000000,0x20000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f000,0x1f000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x0,0x40000000,0x0,0x0,0xb,0xb,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x4001e000,0x4001f800,0x400000,0x800000,0x3000000,0x3000000,0x3c000000,0x3c000000,0x60000,0x60000,0x380000,0x380000,0x40000,0x38,0x4017c,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EPLOAM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EPLOAM(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EPLOAMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EPLOAM(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EPLOAMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EPLOAM(EPLOAMTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EPLOAMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
